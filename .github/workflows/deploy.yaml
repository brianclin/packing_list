on:
  push:
    branches: [main]

env:
  AWS_REGION: "us-east-1"

permissions:
  id-token: write
  contents: read

jobs:
  create-repo:
    runs-on: ubuntu-latest
    steps:
    - name: git clone the repository
      uses: actions/checkout@v3
    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v2.2.0
      with:
        role-to-assume: arn:aws:iam::433766115278:role/ghActionsRole
        role-session-name: GitHub_to_AWS_via_FederatedOIDC
        aws-region: ${{ env.AWS_REGION }}
    - name: setup terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.1.7
    - name: tf plan
      run: |
        cd terraform
        terraform init
        terraform validate
        terraform plan --target=aws_ecr_repository.packing_list -var 'application_version=${{ github.sha }}'
    - name: tf apply
      run: |
        cd terraform
        terraform apply -auto-approve --target=aws_ecr_repository.packing_list -var 'application_version=${{ github.sha }}'

  create-secret-key-base:
    runs-on: ubuntu-latest
    steps:
    - name: git clone the repository
      uses: actions/checkout@v3
    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v2.2.0
      with:
        role-to-assume: arn:aws:iam::433766115278:role/ghActionsRole
        role-session-name: GitHub_to_AWS_via_FederatedOIDC
        aws-region: ${{ env.AWS_REGION }}
    - name: setup terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.1.7
    - name: tf plan
      run: |
        cd terraform
        terraform init
        terraform validate
        terraform plan --target=aws_ssm_parameter.secret_key_base
    - name: tf apply
      run: |
        cd terraform
        terraform apply -auto-approve --target=aws_ssm_parameter.secret_key_base
        
  push-to-ecr:
    needs: [create-repo, create-secret-key-base]
    runs-on: ubuntu-latest
    steps:
      - name: git clone the repository
        uses: actions/checkout@v3
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2.2.0
        with:
          role-to-assume: arn:aws:iam::433766115278:role/ghActionsRole
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}
      - name: setup ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2.2
          bundler-cache: true
      - name: precompile assets
        run: |
          sudo apt-get -yqq install libpq-dev
          gem install bundler:1.17.3
          bundle install --jobs 4 --retry 3
          export RAILS_ENV="production"
          export SECRET_KEY_BASE="$(aws ssm get-parameter --name /packing_list/secret_key_base --with-decryption --query "Parameter.Value" --output text)"
          bundle exec rails assets:precompile
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build, tag, and push docker image to Amazon ECR
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/packing_list:${{ github.sha }}
          cache-to: type=gha,mode=max
          cache-from: type=gha

  create-db:
    runs-on: ubuntu-latest
    steps:
    - name: git clone the repository
      uses: actions/checkout@v3
    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v2.2.0
      with:
        role-to-assume: arn:aws:iam::433766115278:role/ghActionsRole
        role-session-name: GitHub_to_AWS_via_FederatedOIDC
        aws-region: ${{ env.AWS_REGION }}
    - name: setup terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.1.7
    - name: tf plan
      run: |
        cd terraform
        terraform init
        terraform validate
        terraform plan --target=aws_db_instance.packing_list
    - name: tf apply
      run: |
        cd terraform
        terraform apply -auto-approve --target=aws_db_instance.packing_list

  seed-db:
    needs: [create-db, create-secret-key-base]
    runs-on: ubuntu-latest
    steps:
    - name: git clone the repository
      uses: actions/checkout@v3
    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v2.2.0
      with:
        role-to-assume: arn:aws:iam::433766115278:role/ghActionsRole
        role-session-name: GitHub_to_AWS_via_FederatedOIDC
        aws-region: ${{ env.AWS_REGION }}
    - name: setup terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.1.7
    - name: setup ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.2.2
        bundler-cache: true
    - name: setup db
      run: |
        cd terraform
        terraform init
        terraform apply -refresh-only -auto-approve
        export DATABASE_HOST="$(terraform-bin output -raw db_host)"
        cd ..
        sudo apt-get -yqq install libpq-dev
        gem install bundler:1.17.3
        bundle install --jobs 4 --retry 3
        export RAILS_ENV="production"
        export DATABASE_NAME="packing_list"
        export DATABASE_USERNAME="postgres"
        export DATABASE_PASSWORD="$(aws ssm get-parameter --name /packing_list/database_password --with-decryption --query "Parameter.Value" --output text)"
        export SECRET_KEY_BASE="$(aws ssm get-parameter --name /packing_list/secret_key_base --with-decryption --query "Parameter.Value" --output text)"
        bundle exec rails db:migrate
        bundle exec rails r db/add_categories.rb

  deploy-to-eb:
    needs: [push-to-ecr, seed-db]
    runs-on: ubuntu-latest
    steps:
    - name: git clone the repository
      uses: actions/checkout@v3
    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v2.2.0
      with:
        role-to-assume: arn:aws:iam::433766115278:role/ghActionsRole
        role-session-name: GitHub_to_AWS_via_FederatedOIDC
        aws-region: ${{ env.AWS_REGION }}
    - name: setup terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.1.7
    - name: tf plan
      run: |
        cd terraform
        terraform init
        terraform validate
        terraform plan -var 'application_version=${{ github.sha }}'
    - name: tf apply
      run: |
        cd terraform
        terraform apply -auto-approve -var 'application_version=${{ github.sha }}'
